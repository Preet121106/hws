// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview A chatbot flow that intelligently gathers information, provides real-time analysis and solutions, and asks relevant follow-up questions.
 *
 * - enhanceBotInteraction - A function that handles the chatbot interaction process.
 * - EnhanceBotInteractionInput - The input type for the enhanceBotInteraction function.
 * - EnhanceBotInteractionOutput - The return type for the enhanceBotInteraction function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

const EnhanceBotInteractionInputSchema = z.object({
  userInput: z.string().describe('The user input or question.'),
  chatHistory: z.array(z.object({
    role: z.enum(['user', 'bot']),
    content: z.string(),
  })).optional().describe('The chat history between the user and the bot.'),
});
export type EnhanceBotInteractionInput = z.infer<typeof EnhanceBotInteractionInputSchema>;

const EnhanceBotInteractionOutputSchema = z.object({
  botResponse: z.string().describe('The chatbot response, including analysis, solutions, and follow-up questions.'),
});
export type EnhanceBotInteractionOutput = z.infer<typeof EnhanceBotInteractionOutputSchema>;

export async function enhanceBotInteraction(input: EnhanceBotInteractionInput): Promise<EnhanceBotInteractionOutput> {
  return enhanceBotInteractionFlow(input);
}

const prompt = ai.definePrompt({
  name: 'enhanceBotInteractionPrompt',
  input: {
    schema: z.object({
      userInput: z.string().describe('The user input or question.'),
      chatHistory: z.array(z.object({
        role: z.enum(['user', 'bot']),
        content: z.string(),
      })).optional().describe('The chat history between the user and the bot.'),
    }),
  },
  output: {
    schema: z.object({
      botResponse: z.string().describe('The chatbot response, including analysis, solutions, and follow-up questions.'),
    }),
  },
  prompt: `You are a helpful and empathetic chatbot designed to understand user issues and provide support.

  Based on the user's input and the chat history, provide real-time analysis and solutions.
  Ask relevant follow-up questions to gather more information and ensure the user feels understood and supported.

  Consider the user's sentiment and tailor your response accordingly.

  Chat History:
  {{#each chatHistory}}
  {{#if (eq this.role \"user\")}}
  User: {{{this.content}}}
  {{else}}
  Bot: {{{this.content}}}
  {{/if}}
  {{/each}}

  User Input: {{{userInput}}}

  Bot Response:`, 
});

const enhanceBotInteractionFlow = ai.defineFlow<
  typeof EnhanceBotInteractionInputSchema,
  typeof EnhanceBotInteractionOutputSchema
>({
  name: 'enhanceBotInteractionFlow',
  inputSchema: EnhanceBotInteractionInputSchema,
  outputSchema: EnhanceBotInteractionOutputSchema,
}, async input => {
  const {output} = await prompt(input);
  return output!;
});
